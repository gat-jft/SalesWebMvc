<!-- Esta View vai receber uma Coleção de SalesRecord. -->
@model IEnumerable<SalesWebMvc_.Net7.Models.SalesRecord>

@{
    ViewData["Title"] = "Simple Search";
}

<h2>@ViewData["Title"]</h2>

<nav class="navbar navbar-inverse">
    <div class="container-fluid">
        <form class="navbar-form navbar-left" role="search">
            <div class="form-group">
                <div class="form-group">
                    <label for="minDate">Min Date</label>
                    <!-- Quando eu registrava uma Data na caixinha, ela não ficava registrada.
                         Aí, coloquei este este atributo ABAIXO "value" recebendo um código C#.
                           - Porque eu posso colocar qualquer código C# numa View (página .cshtml),
                             porque é uma página que recebe tanto código HTML quanto C#.
                           - O código C# começa com o ARROBA.      
                           - Então, o "value" (valor exibido), sempre terá o código C#, que é
                             no caso um Dicionário (do C#) [chave] = Valor.
                           - E um ViewData eu posso colocar tanto aqui na View quanto no Controlador
                             referente a esta View, e capturá-lo lá do Controlador, usando o ARROBA
                             seguido do Código / elemento do C#.
                          Então, existem 2 formas de eu enviar / capturar algo de um Controlador para 
                          uma View:
                          - Crio uma Dado no Controlador, o melhor forma é ViewData, que é um Dicionário
                            Chave=Valor.
                          - Na View eu capturo este ViewData ou qq outro Tipo, na View, chamando este
                            Tipo ou o que for começando com o ARROBA.
                          - OU, passando do Controlador para a View, no return View(Dado, como uma Lista etc).
                              - Quando o dado é passado no return do Controlador, na View eu recebo ele na 
                                1ª linha da View, como exemplo esta aqui:
                                "ARROBAmodel IEnumerable<SalesWebMvc_.Net7.Models.SalesRecord>"
                              - Quando não é passado no return, eu crio o dado no Controlador, como exemplo
                                um Dicionário ViewData[], (mas acho que pode ser até List!!!), eu buco ele
                                lá do Controlador com o ARROBA seguido do Dado. 
                    -->
                    <input type="date" class="form-control" name="minDate" value=@ViewData["minDate"] />
                </div>
                <div class="form-group">
                    <label for="maxDate">Max Date</label>
                    <!-- Da mesma forma eu capturei o Dicionário [Chave] = Valor, lá do Controlador (C#). -->
                    <input type="date" class="form-control" name="maxDate" value=@ViewData["maxDate"] />
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Filter</button>
        </form>
    </div>
</nav>
<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">Total sales = @Model.Sum(obj => obj.Amount).ToString("F2")</h3>
    </div>
    <div class="panel-body">
        <table class="table table-striped table-hover">
            <thead>
                <tr class="success">
                    <th>
                        @Html.DisplayNameFor(model => model.Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Date)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Seller)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Seller.Department)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Amount)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Status)
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Date)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Seller.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Seller.Department.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Amount)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Status)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>